/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
@!namespace("@ohos.multimodalAwareness.metadataBinding", "metadataBinding")

@!sts_inject_into_module("import image from '@ohos.multimedia.image';")

@!sts_inject("""
static
{ loadLibrary("MetadataBinding.z") }
""")

@!sts_inject("""
    function on(type: 'operationSubmitMetadata', bundleName: string, callback: (info: int) => void) {
        return onMetadata(bundleName, callback, callback);
      }
    function off(type: 'operationSubmitMetadata', bundleName: string, callback?: (info: int) => void) {
        return offMetadata(bundleName, callback);
      }
""")

function onMetadata(bundleName: String, callbck: (info: i32) => void, opq: Opaque);
function offMetadata(bundleName: String, opq: Optional<Opaque>);

function submitMetadata(metadata: String): void;

@gen_promise("notifyMetadataBindingEvent")
function notifyMetadataBindingEventPromise(bundleName: String): @sts_type("Promise<String>") Opaque;
@gen_promise("encodeImage")
function encodeImagePromise(srcImage: @sts_type("image.PixelMap") Opaque, metadata: String): @sts_type("Promise<image.PixelMap>") Opaque;
@gen_promise("decodeImage")
function decodeImagePromise(encodedImage: @sts_type("image.PixelMap") Opaque): @sts_type("Promise<String>") Opaque;

