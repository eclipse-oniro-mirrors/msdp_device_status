# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("../device_status.gni")

config("devicestatus_private_config") {
  include_dirs = [ "${device_status_interfaces_path}/innerkits/include" ]
}

config("devicestatus_srv_public_config") {
  include_dirs = [
    "include",
    "interface",
    "include/algorithm",
    "include/datahub",
  ]
}

ohos_shared_library("devicestatus_mock") {
  sources = [
    "src/devicestatus_data_parse.cpp",
    "src/devicestatus_msdp_mock.cpp",
  ]

  configs = [
    "${device_status_utils_path}:devicestatus_utils_config",
    ":devicestatus_private_config",
  ]

  public_configs = [ ":devicestatus_srv_public_config" ]

  deps = [ "${device_status_utils_path}:devicestatus_util" ]

  external_deps = [
    "c_utils:utils",
    "cJSON:cjson_static",
    "hilog:libhilog",
  ]

  defines = []
  if (device_status_sensor_enable) {
    external_deps += [ "sensor:sensor_interface_native" ]
    defines += [ "DEVICE_STATUS_SENSOR_ENABLE" ]
  }

  subsystem_name = "${device_status_subsystem_name}"
  part_name = "${device_status_part_name}"
}

ohos_shared_library("devicestatus_algo") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    integer_overflow = true
    ubsan = true
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  sources = [
    "src/algorithm/algo_absolute_still.cpp",
    "src/algorithm/algo_base.cpp",
    "src/algorithm/algo_horizontal.cpp",
    "src/algorithm/algo_vertical.cpp",
    "src/datahub/sensor_data_callback.cpp",
    "src/devicestatus_algorithm_manager.cpp",
  ]

  configs = [
    "${device_status_utils_path}:devicestatus_utils_config",
    ":devicestatus_private_config",
  ]

  public_configs = [ ":devicestatus_srv_public_config" ]

  deps = [
    "${device_status_interfaces_path}/innerkits:devicestatus_client",
    "${device_status_utils_path}:devicestatus_util",
  ]

  external_deps = [
    "ability_base:base",
    "cJSON:cjson_static",
    "hilog:libhilog",
    "input:libmmi-client",
    "ipc:ipc_single",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]
  defines = []
  if (device_status_sensor_enable) {
    external_deps += [ "sensor:sensor_interface_native" ]
    defines += [ "DEVICE_STATUS_SENSOR_ENABLE" ]
  }

  subsystem_name = "${device_status_subsystem_name}"
  part_name = "${device_status_part_name}"
}
