/*
 * Copyright (C) 2023-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

 1.0{
    global:
        extern "C++" {
            "OHOS::Msdp::DeviceStatus::StationaryManager::GetInstance()";
            "OHOS::Msdp::DeviceStatus::DeviceStatusClient::DeviceStatusClient()";
            "OHOS::Msdp::DeviceStatus::DeviceStatusClient::RegisterDeathListener(std::__h::function<void ()>)";
            "OHOS::Msdp::DeviceStatus::StationaryManager::SubscribeCallback(OHOS::Msdp::DeviceStatus::Type, OHOS::Msdp::DeviceStatus::ActivityEvent, OHOS::Msdp::DeviceStatus::ReportLatencyNs, OHOS::sptr<OHOS::Msdp::DeviceStatus::IRemoteDevStaCallback>)";
            "OHOS::Msdp::DeviceStatus::StationaryManager::UnsubscribeCallback(OHOS::Msdp::DeviceStatus::Type, OHOS::Msdp::DeviceStatus::ActivityEvent, OHOS::sptr<OHOS::Msdp::DeviceStatus::IRemoteDevStaCallback>)";
            "OHOS::Msdp::DeviceStatus::StationaryManager::GetDeviceStatusData(OHOS::Msdp::DeviceStatus::Type)";
            "OHOS::Msdp::DeviceStatus::StationaryManager::GetDevicePostureDataSync(OHOS::Msdp::DeviceStatus::DevicePostureData&)";
            "VTT for OHOS::Msdp::DeviceStatus::DeviceStatusCallbackStub";
            "OHOS::Msdp::DeviceStatus::DeviceStatusCallbackStub::OnRemoteRequest(unsigned int, OHOS::MessageParcel&, OHOS::MessageParcel&, OHOS::MessageOption&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetInstance()";
            "OHOS::Msdp::DeviceStatus::InteractionManager::AddDraglistener(std::__h::shared_ptr<OHOS::Msdp::DeviceStatus::IDragListener>, bool)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::RemoveDraglistener(std::__h::shared_ptr<OHOS::Msdp::DeviceStatus::IDragListener>, bool)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::AddSubscriptListener(std::__h::shared_ptr<OHOS::Msdp::DeviceStatus::ISubscriptListener>)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::RemoveSubscriptListener(std::__h::shared_ptr<OHOS::Msdp::DeviceStatus::ISubscriptListener>)";
            "VTT for OHOS::Msdp::DeviceStatus::DeviceStatusCallbackProxy";
            "vtable for OHOS::Msdp::DeviceStatus::DeviceStatusCallbackProxy";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetDragTargetPid()";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetUdKey(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::RegisterCoordinationListener(std::__h::shared_ptr<OHOS::Msdp::ICoordinationListener>, bool)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::UnregisterCoordinationListener(std::__h::shared_ptr<OHOS::Msdp::ICoordinationListener>, bool)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::PrepareCoordination(std::__h::function<void (std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, OHOS::Msdp::CoordinationMsgInfo const&)>, bool)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::UnprepareCoordination(std::__h::function<void (std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, OHOS::Msdp::CoordinationMsgInfo const&)>, bool)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::ActivateCoordination(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, int, std::__h::function<void (std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, OHOS::Msdp::CoordinationMsgInfo const&)>, bool)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::ActivateCooperateWithOptions(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, int, std::__h::function<void (std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, OHOS::Msdp::CoordinationMsgInfo const&)>, OHOS::Msdp::CooperateOptions const&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::DeactivateCoordination(bool, std::__h::function<void (std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, OHOS::Msdp::CoordinationMsgInfo const&)>, bool)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetCoordinationState(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::function<void (bool)>, bool)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetCoordinationState(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, bool&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::RegisterEventListener(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::shared_ptr<OHOS::Msdp::IEventListener>)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::UnregisterEventListener(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, std::__h::shared_ptr<OHOS::Msdp::IEventListener>)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::SetDamplingCoefficient(unsigned int, double)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::StartDrag(OHOS::Msdp::DeviceStatus::DragData const&, std::__h::shared_ptr<OHOS::Msdp::DeviceStatus::IStartDragListener>)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::StopDrag(OHOS::Msdp::DeviceStatus::DragDropResult const&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::SetDragWindowVisible(bool, bool, std::__h::shared_ptr<OHOS::Rosen::RSTransaction> const&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetShadowOffset(int&, int&, int&, int&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::UpdateDragStyle(OHOS::Msdp::DeviceStatus::DragCursorStyle, int)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::UpdateShadowPic(OHOS::Msdp::DeviceStatus::ShadowInfo const&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetDragData(OHOS::Msdp::DeviceStatus::DragData&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetDragState(OHOS::Msdp::DeviceStatus::DragState&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::AddHotAreaListener(std::__h::shared_ptr<OHOS::Msdp::IHotAreaListener>)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::RemoveHotAreaListener(std::__h::shared_ptr<OHOS::Msdp::IHotAreaListener>)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::UpdatePreviewStyle(OHOS::Msdp::DeviceStatus::PreviewStyle const&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::UpdatePreviewStyleWithAnimation(OHOS::Msdp::DeviceStatus::PreviewStyle const&, OHOS::Msdp::DeviceStatus::PreviewAnimation const&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::RotateDragWindowSync(std::__h::shared_ptr<OHOS::Rosen::RSTransaction> const&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetDragSummary(std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, long long, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const, long long>>>&, bool)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetDragSummary(std::__h::map<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, long, std::__h::less<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>>, std::__h::allocator<std::__h::pair<std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const, long>>>&, bool)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::SetDragSwitchState(bool, bool)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::SetAppDragSwitchState(bool, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&, bool)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetDropType(OHOS::Msdp::DeviceStatus::DropType&)";
            "OHOS::Msdp::DeviceStatus::DragDataUtil::Marshalling(OHOS::Msdp::DeviceStatus::DragData const&, OHOS::Parcel&, bool)";
            "OHOS::Msdp::DeviceStatus::DragDataUtil::UnMarshalling(OHOS::Parcel&, OHOS::Msdp::DeviceStatus::DragData&, bool)";
            "OHOS::Msdp::DeviceStatus::DragDataUtil::MarshallingDetailedSummarys(OHOS::Msdp::DeviceStatus::DragData const&, OHOS::Parcel&)";
            "OHOS::Msdp::DeviceStatus::DragDataUtil::UnMarshallingDetailedSummarys(OHOS::Parcel&, OHOS::Msdp::DeviceStatus::DragData&)";
            "OHOS::Msdp::DeviceStatus::DragDataUtil::MarshallingSummaryExpanding(OHOS::Msdp::DeviceStatus::DragData const&, OHOS::Parcel&)";
            "OHOS::Msdp::DeviceStatus::DragDataUtil::UnMarshallingSummaryExpanding(OHOS::Parcel&, OHOS::Msdp::DeviceStatus::DragData&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::EnterTextEditorArea(bool)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetDragAction(OHOS::Msdp::DeviceStatus::DragAction&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetExtraInfo(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::AddPrivilege()";
            "OHOS::Msdp::DeviceStatus::InteractionManager::EraseMouseIcon()";
            "OHOS::Msdp::DeviceStatus::InteractionManager::SetDragWindowScreenId(unsigned long, unsigned long)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::SetDragWindowScreenId(unsigned long long, unsigned long long)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::SetMouseDragMonitorState(bool)";
	        "OHOS::Msdp::DeviceStatus::InteractionManager::AddSelectedPixelMap(std::__h::shared_ptr<OHOS::Media::PixelMap>, std::__h::function<void (bool)>)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::SetDraggableState(bool)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetAppDragSwitchState(bool&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::SetDraggableStateAsync(bool, long)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::SetDraggableStateAsync(bool, long long)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetDragBundleInfo(OHOS::Msdp::DeviceStatus::DragBundleInfo&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::EnableInternalDropAnimation(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>> const&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::IsDragStart()";
            "OHOS::Msdp::DeviceStatus::BoomerangManager::GetInstance()";
            "OHOS::Msdp::DeviceStatus::BoomerangManager::SubscribeCallback(OHOS::Msdp::DeviceStatus::BoomerangType, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, OHOS::sptr<OHOS::Msdp::DeviceStatus::IRemoteBoomerangCallback>)";
            "OHOS::Msdp::DeviceStatus::BoomerangManager::UnsubscribeCallback(OHOS::Msdp::DeviceStatus::BoomerangType, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, OHOS::sptr<OHOS::Msdp::DeviceStatus::IRemoteBoomerangCallback>)";
            "OHOS::Msdp::DeviceStatus::BoomerangManager::SubmitMetadata(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>)";
            "OHOS::Msdp::DeviceStatus::BoomerangManager::NotifyMetadataBindingEvent(std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, OHOS::sptr<OHOS::Msdp::DeviceStatus::IRemoteBoomerangCallback>)";
            "OHOS::Msdp::DeviceStatus::BoomerangManager::BoomerangEncodeImage(std::__h::shared_ptr<OHOS::Media::PixelMap>, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, OHOS::sptr<OHOS::Msdp::DeviceStatus::IRemoteBoomerangCallback>)";
            "OHOS::Msdp::DeviceStatus::BoomerangManager::BoomerangDecodeImage(std::__h::shared_ptr<OHOS::Media::PixelMap>, OHOS::sptr<OHOS::Msdp::DeviceStatus::IRemoteBoomerangCallback>)";
            "VTT for OHOS::Msdp::DeviceStatus::BoomerangCallbackStub";
            "vtable for OHOS::Msdp::DeviceStatus::DeviceStatusCallbackStub";
            "OHOS::Msdp::DeviceStatus::BoomerangCallbackStub::OnRemoteRequest(unsigned int, OHOS::MessageParcel&, OHOS::MessageParcel&, OHOS::MessageOption&)";
            "OHOS::Msdp::DeviceStatus::OnScreen::OnScreenManager::GetInstance()";
            "OHOS::Msdp::DeviceStatus::OnScreen::OnScreenManager::GetPageContent(OHOS::Msdp::DeviceStatus::OnScreen::ContentOption const&, OHOS::Msdp::DeviceStatus::OnScreen::PageContent&)";
            "OHOS::Msdp::DeviceStatus::OnScreen::OnScreenManager::SendControlEvent(OHOS::Msdp::DeviceStatus::OnScreen::ControlEvent const&)";
            "OHOS::Msdp::DeviceStatus::InteractionManager::GetDragSummaryInfo(OHOS::Msdp::DeviceStatus::DragSummaryInfo&)";
            "VTT for OHOS::Msdp::DeviceStatus::OnScreen::OnScreenCallbackStub";
            "OHOS::Msdp::DeviceStatus::OnScreen::OnScreenCallbackStub::OnRemoteRequest(unsigned int, OHOS::MessageParcel&, OHOS::MessageParcel&, OHOS::MessageOption&)";
            "OHOS::Msdp::DeviceStatus::OnScreen::OnScreenManager::RegisterScreenEventCallback(int, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, OHOS::sptr<OHOS::Msdp::DeviceStatus::OnScreen::IRemoteOnScreenCallback>)";
            "OHOS::Msdp::DeviceStatus::OnScreen::OnScreenManager::UnregisterScreenEventCallback(int, std::__h::basic_string<char, std::__h::char_traits<char>, std::__h::allocator<char>>, OHOS::sptr<OHOS::Msdp::DeviceStatus::OnScreen::IRemoteOnScreenCallback>)";
            "OHOS::Msdp::DeviceStatus::OnScreen::OnScreenManager::IsParallelFeatureEnabled(int, int&)";
        };
    local:
        *;
 };